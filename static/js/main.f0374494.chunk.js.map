{"version":3,"sources":["assets/logo.svg","serviceWorker.js","components/Navbar/index.js","components/Map/Map.js","components/Chart/index.js","components/Search/index.js","pages/Home/index.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Navbar","className","src","logo","alt","MapContainer","Map","center","zoom","keyboard","zoomControl","TileLayer","url","attribution","Datos","map","dato","index","positionCountrie","lat","lng","Marker","key","position","Popup","name","Chart","useState","data","setData","useEffect","a","Axios","get","prop","result","days","cases","deaths","recovered","timeline","push","forEach","day","object","getData","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stackId","stroke","fill","Search","placeholder","Home","href","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0374494.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f805f198.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nimport \"./styles.scss\";\nimport logo from \"../../assets/logo.svg\";\n\nconst Navbar = () => {\n  return (\n    <header className=\"navbar\">\n      <div className=\"navbar__logo\">\n        <img src={logo} alt=\"Logo\" />\n      </div>\n      <div className=\"navbar__about\">\n        <h1>About</h1>\n      </div>\n    </header>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport { Map, TileLayer, Popup, Marker } from \"react-leaflet\";\nimport Datos from \"../../coordenadas.json\";\n\nimport \"./styles.scss\";\n\nconst MapContainer = () => {\n  return (\n    <Map center={[0, 0]} zoom={2} keyboard={false} zoomControl={false}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      {Datos.map((dato, index) => {\n        let positionCountrie = [dato.location.lat, dato.location.lng];\n        return (\n          <Marker key={index} position={positionCountrie}>\n            <Popup>\n              Pais: {dato.name}\n              <br />\n              Confirmados: 160,000\n              <br />\n              Muertes: 19,080\n            </Popup>\n          </Marker>\n        );\n      })}\n    </Map>\n  );\n};\n\nexport default MapContainer;\n","import React, { useEffect, useState } from \"react\";\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\nimport Axios from \"axios\";\n\nconst Chart = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    async function getData() {\n      const result = await Axios.get(\"https://corona.lmao.ninja/v2/historical/ita\");\n      let data = [];\n      let days = [];\n      let cases = [];\n      let deaths = [];\n      let recovered = [];\n      for (const prop in result.data.timeline.cases) {\n        days.push(prop);\n        cases.push(result.data.timeline.cases[prop]);\n        deaths.push(result.data.timeline.deaths[prop]);\n        recovered.push(result.data.timeline.recovered[prop]);\n      }\n      days.forEach((day, index) => {\n        let object = {};\n        object[\"name\"] = day;\n        object[\"infected\"] = cases[index];\n        object[\"deaths\"] = deaths[index];\n        object[\"recovered\"] = recovered[index];\n        data.push(object);\n      });\n      setData(data);\n    }\n    getData();\n  }, []);\n\n  return (\n    <AreaChart\n      width={500}\n      height={300}\n      data={data}\n      margin={{\n        top: 10,\n        right: 30,\n        left: 0,\n        bottom: 0,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <Area type=\"monotone\" dataKey=\"deaths\" stackId=\"1\" stroke=\"#862a5c\" fill=\"#862a5c\" />\n      <Area type=\"monotone\" dataKey=\"infected\" stackId=\"1\" stroke=\"#f4a548\" fill=\"#f4a548\" />\n      <Area type=\"monotone\" dataKey=\"recovered\" stackId=\"1\" stroke=\"#30e2c5\" fill=\"#30e2c5\" />\n    </AreaChart>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nconst Search = () => (\n  <section className=\"search\">\n    <input type=\"text\" className=\"input\" placeholder=\"País...\" />\n  </section>\n);\n\nexport default Search;\n","import React from \"react\";\n\nimport Navbar from \"../../components/Navbar/index\";\nimport MapContainer from \"../../components/Map/Map\";\nimport Chart from \"../../components/Chart\";\nimport Search from \"../../components/Search/index\";\n\nimport \"./styles.scss\";\n\nexport const Home = () => {\n  return (\n    <>\n      <main className=\"container\">\n        <section className=\"home__map\">\n          <Navbar />\n          <MapContainer />\n        </section>\n        <section className=\"home__data\">\n          <Search />\n          <h1>País</h1>\n          <div className=\"card card__infected\">\n            <p>Card infectados totales</p>\n          </div>\n          <div className=\"card card__activeCases\">\n            <p>Card de indectados activos </p>\n          </div>\n          <div className=\"card card__deadths\">\n            <p>Card número de muertes totales</p>\n          </div>\n          <div className=\"card card__recovered\">\n            <p>Card recuperados totales</p>\n          </div>\n          <div className=\"card card__data\">\n            <Chart />\n          </div>\n          <p className=\"termsAndConditions\">\n            <a href=\"/\">Términos y condiciones</a>\n          </p>\n          <p className=\"copyrigths\">\n            <a href=\"/\">@Copyright 2020</a>\n          </p>\n        </section>\n      </main>\n    </>\n  );\n};\n","import React, { Fragment } from \"react\";\nimport { Home } from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <Home />\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport './scss/Variables.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}